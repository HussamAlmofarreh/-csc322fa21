<canvas id="c"></canvas>
  <script src="https://r105.threejsfundamentals.org/threejs/resources/threejs/r105/three.min.js"></script>
  
  
  function main() {
  const canvas = document.querySelector('#c');
  const renderer = new THREE.WebGLRenderer({
    canvas
  });

  const fov = 75;
  const aspect = 2;
  const near = 0.1;
  const far = 100;
  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
  camera.position.z = 5;

  const scene = new THREE.Scene();


  const geometry = new THREE.Geometry();
  geometry.vertices.push(
    new THREE.Vector3(-1, -1, 1),
    new THREE.Vector3(1, -1, 1),
    new THREE.Vector3(-1, 1, 1),
    new THREE.Vector3(1, 1, 1),
    new THREE.Vector3(-1, -1, -1),
    new THREE.Vector3(1, -1, -1),
    new THREE.Vector3(-1, 1, -1),
    new THREE.Vector3(1, 1, -1),
  );



  geometry.faces.push(

    new THREE.Face3(0, 3, 2),
    new THREE.Face3(0, 1, 3),

    new THREE.Face3(1, 7, 3),
    new THREE.Face3(1, 5, 7),

    new THREE.Face3(5, 6, 7),
    new THREE.Face3(5, 4, 6),

    new THREE.Face3(4, 2, 6),
    new THREE.Face3(4, 0, 2),

    new THREE.Face3(2, 7, 6),
    new THREE.Face3(2, 3, 7),
    new THREE.Face3(4, 1, 0),
    new THREE.Face3(4, 5, 1),
  );

geometry.computeFaceNormals();

  function makeInstance(geometry, x) {
    const material = new THREE.MeshBasicMaterial();
  

    const cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    cube.position.x = x;
    return cube;
  }
  const cubes = [
    makeInstance(geometry, 0),

  ];


  function resizeRendererToDisplaySize(renderer) {
    const canvas = renderer.domElement;
    const width = canvas.clientWidth;
    const height = canvas.clientHeight;
    const needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
      renderer.setSize(width, height, false);
    }
    return needResize;
  }

  function render(time) {
    time *= 0.001;

    if (resizeRendererToDisplaySize(renderer)) {
      const canvas = renderer.domElement;
      camera.aspect = canvas.clientWidth / canvas.clientHeight;
      camera.updateProjectionMatrix();
    }
    cubes.forEach((cube, ndx) => {
      const speed = 1 + ndx;
      const rot = time * speed;
      cube.rotation.x = rot;
      cube.rotation.y = rot;
    });


    renderer.render(scene, camera);

    requestAnimationFrame(render);
  }

  requestAnimationFrame(render);
}

main();
